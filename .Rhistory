| sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2/(nMan - 1) + (sampVarAutoMPG/nAuto)^2/(nAuto -
| 1))
myDF <- (sampVarManMPG/nMan + sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2(nMan - 1) + sampVarAutoMPG/nAuto)^2/(nAuto - 1))
myDF <- (sampVarManMPG/nMan +
| sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2/(nMan - 1) + (sampVarAutoMPG/nAuto)^2/(nAuto -
| 1))
myDF <- (sampVarManMPG/nMan + sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2/(nMan - 1) + sampVarAutoMPG/nAuto)^2/(nAuto - 1))
myDF <- (sampVarManMPG/nMan +
| sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2/(nMan - 1) + (sampVarAutoMPG/nAuto)^2/(nAuto -
| 1))
myDF <- (sampVarManMPG/nMan + sampVarAutoMPG/nAuto)^2
myDF <- (sampVarManMPG/nMan + sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2/(nMan - 1) + (sampVarAutoMPG/nAuto)^2/(nAuto - 1))
tStat
myDF
pVal1 <- pt(tStat, df=myDF, lower.tail=FALSE)
pVal < pVal1 * 2
pVal <- pVal1 * 2
pVal
t.test(autoMpg,autoMan,alternative="two.sided")
t.test(autoMPG,manMPG,alternative="two.sided")
library(swirl)
swirl()
library(swirl)
swirl()
help()
info()
main()
sigma <- 10
delta <- 5
zAlpha <- qnorm(0.95)
play()
zAlpha
nxt()
zBeta <- qnorm(0.20)
(sigma / delta)^2 * (zAlpha - zBeta)^2
effectSize <- delta / sigma
pwr.norm.test(d=effectSize, sig.level=0.05, power=0.80, alternative="greater")
pwr.t.test(d=effectSize, sig.level=0.05, power=0.80, type="one.sample", alternative="greater")
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
set.seed(1410)
dsmall <- diamonds[sample(nrow(diamonds), 100)]
dsmall <- diamonds[sample(nrow(diamonds), 100),]
qplot(carat, price, data=diamonds)
qplot(log(carat), log(price), data=diamonds)
qplot(carat, x*y*z, data=diamonds)
qplot(carat, price, data=dsmall, colour=color)
qplot(carat, price, data=dsmall, shape=cut)
qplot(carat, price, data=dsmall, colour=color)
qplot(carat, price, data=diamonds, alpha=I(1/10))
qplot(carat, price, data=diamonds, alpha=I(1/100))
qplot(carat, price, data=diamonds, alpha=I(1/200))
qplot(carat, price, data=diamonds, geom=c("point","smooth"))
qplot(carat, price, data=dsmall, geom=c("point","smooth"))
qplot(carat, price, data=dsmall, geom=c("point","smooth"), span=0.2)
qplot(carat, price, data=dsmall, geom=c("point","smooth"), span=1)
library(mgcv)
qplot(carat, price, data=dsmall, geom=c("point","smooth"), method="gam", formula= y ~ s(x))
qplot(carat, price, data=dsmall, geom=c("point","smooth"), method="gam", formula= y ~ s(x, bs="cs"))
library(splines)
qplot(carat, price, data=dsmall, geom=c("point","smooth"), method="lm")
qplot(carat, price, data=dsmall, geom=c("point","smooth"), method="lm", formula= y ~ ns(x,5))
library(MASS)
qplot(carat, price, data=dsmall, geom=c("point","smooth"), method="rlm")
qplot(carat, price, data=dsmall, geom="jitter")
qplot(carat, price, data=dsmall, geom=c("point","jitter"), method="lm")
qplot(carat, price, data=dsmall, geom=c("point","boxplot"), method="lm")
qplot(carat, price, data=dsmall, geom=c("point","jitter"), alpha=I(1/5))
qplot(carat, price, data=dsmall, geom=c("point","jitter"), alpha=I(1/50))
qplot(carat, price, data=diamonds, geom=c("point","jitter"), alpha=I(1/50))
qplot(carat, price, data=diamonds, geom=c("point","jitter"), alpha=I(1/200))
qplot(color, price / carat, data=diamonds, geom=c("point","jitter"), alpha=I(1/200))
library(ggplot2)
qplot(carat, data=diamonds, geom="histogram")
qplot(carat, data=diamonds, geom="density")
qplot(carat, data=diamonds, geom="histogram", binwidth=1,xlim=c(0,3))
qplot(carat, data=diamonds, geom="histogram", binwidth=0.1,xlim=c(0,3))
qplot(carat, data=diamonds, geom="histogram", binwidth=0.01,xlim=c(0,3))
qplot(carat, data=diamonds, geom="histogram", fill=color)
qplot(carat, data=diamonds, geom="density", color=color)
qplot(carat, data=diamonds, geom="bar")
qplot(carat, data=diamonds, geom="density", color=color) + scale_y_continuous("carat")
qplot(carat, data=diamonds, geom="bar", weight=carat) + scale_y_continuous("carat")
qplot(date, unemploy / pop, data=economics, geom="line")
qplot(data, uempmed, data=economics, geom="line")
qplot(date, uempmed, data=economics, geom="line")
year <- funciton(x) as POSIXlt(x)$year + 1900
year <- function(x) as POSIXlt(x)$year + 1900
year <- function(x) as.POSIXlt(x)$year + 1900
qplot(unemploy / pop, uempmed, data=economics,geom=c("point","path"))
year <- function(x) as.POSIXlt(x)$year + 1900
qplot(unemploy / pop, uempmed, data=economics,geom="path", color= year(date)) + scale_area()
qplot(carat, data=diamonds, facets=color, geom="histogram", binwidth=-.1,xlim=c(0,3))
qplot(carat, data=diamonds, facets= color ~ ., geom="histogram", binwidth=-.1,xlim=c(0,3))
qplot(carat, data=diamonds, facets= color ~ ., geom="histogram", binwidth=0.1,xlim=c(0,3))
qplot(carat, ..density.. , data=diamonds, facets= color ~ ., geom="histogram", binwidth=0.1,xlim=c(0,3))
qplot()
qplot( carat, price, data = dsmall, xlab = "Price ($)",ylab="Weight (carats)"),main="Price-weight relationship")
qplot( carat, price, data = dsmall, xlab = "Price ($)",ylab="Weight (carats)"),main="Price-weight relationship"
qplot(carat, price, data = dsmall, xlab = "Price ($)",ylab="Weight (carats)",main="Price-weight relationship")
qplot(displ, hwy, data = mpg, color = factor(cyl))
library(swirl)
swirl()
swirl()
mtcars
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
sampMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
n <- length(allMPG)
tStat <- (sampMeanMPG - 12.0) / sqrt(sampVarMPG / n)
myDF <- n - 1
tStat
myDF
pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
pVal <- pVal1 # 2
pVal
t.test(allMPG, mu=12.0, alternative="two.sided")
weights <- c(3,1)
grades <- (85,70,90)
grades <- c(85,70,90)
weights <- c(3,1,1)
wmean <- weighted.mean(weights,grades)
wmean
wmean <- weighted.mean(grades,weights)
wmean
t1 <- c(3,4,4,5,6,8,8,8,10)
median(t1)
mode(t1)
freq(t1)
hist(t1)
install.packages("psych")
library(psych)
t1 <- c(2,4,8)
geometric.mean(t1)
t1 <- c(88,45,53,86,33,86,85,30,89,53,41,96,56,38,62)
t2 <- c(71,51,86,68,29,28,47,33,37,25,36,33,94,73,46)
t3 <- c(42,34,79,72,88,99,82,62,57,42,28,55,67,62,60)
t4 <- c(96,61,57,75,93,34,75,53,32,28,73,51,69,91,35)
t5 <- c(t1,t2,t3,t4)
summary(t5)
quantile(t5,.90)
quantile(t5,.95)
X1 <-2
X2 <- -5
X3 <- 4
X4 <- -8
Y1 <- -3
Y2 = -8
Y3 <- 10
Y4 <- 6
X <- c(X1,X2,X3,X4)
Y <- c(Y1,Y2,Y3,Y4)
sum(X)
sum(Y)
sum(X*Y)
sum(X^2)
sum(Y^2)
sum(X) * sum(Y)
sum(X * (Y^2))
sum((X + Y) * (X - Y))
sum(c(1051.42,875.23,144.33,80.49))
sum(c(1051.42,875.23,144.33,80.49,38.36))
mean(c(84,91,72,68,87,78))
table(t5)
weighted.mean(c(82,86,90,70),c(3,5,3,1))
mean((60*10) + (20*13))
earnings <- repeat(10,60)
earnings <- rep(10,60)
earnings <- c(earnings,rep(20,13))
mean(earnings)
earnings <- c(rep(10,60),rep(13,20))
mean(earnings)
n <- .75 * .30
d <- (.75 * .30) + (.48 * .70)
n / d
qnorm(0.95,mean=1100,sd=75)
qnorm(0.95,mean=1100,sd=75/sqrt(100))
pbinom(4, 5)
pbinom(4,5,0.5)
pbinom(4,5,0.5,lower.tail=FALSE)
pbinom(5,5,0.5,lower.tail=FALSE)
0.5^5
1/6.5
1/6.4
choose(5, 4) * 0.5^5 + choose(5, 5) * 0.5^5
pbinom(3, size = 5, prob = 0.5, lower.tail = FALSE)
ppois(10, lambda = 5 * 3)
1100 + c(-1, 1) * qt(.950, 9-1) * 30 / sqrt(9)
t1 <- rnorm(n=9, m=1100, sd=30)
t.test(t1)
t1 <- rnorm(n=9, m=1100, sd=30)
t.test(t1)
-2 + c(-1, 1) * qt(.950, 9-1) * 30 / sqrt(9)
-2 + c(-1, 1) * qt(.950, 9-1) * 0.3 / sqrt(9)
-2 + c(-1, 1) * qt(.950, 9-1) * 1.5 / sqrt(9)
-2 + c(-1, 1) * qt(.950, 9-1) * 2.1 / sqrt(9)
-2 + c(-1, 1) * qt(.950, 9-1) * 2.6 / sqrt(9)
t1 <- rt(18, 8)
sp <- sqrt((9 * 0.6^2 + 9 * 0.68^2) / (10 + 10 - 2))
3 - 5 + c(-1, 1) * qt(.95, 20) * sp * (1 / 10 + 1 / 10)^.5
t1 <- rnorm(100,mu=4,sd=0.5)
t1 <- rnorm(100,mean=4,sd=0.5)
t2 <- rnorm(100,mean=6,sd=2)
t.test(t1,t2,var.equal = FALSE,mu=0)
t.test(t2,t1,var.equal = FALSE,mu=0)
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2) / (9 + 9 - 2))
-3 - 1 + c(-1, 1) * qt(.90, 18) * sp * (1 / 9 + 1 / 9)^.5
-2 + c(-1, 1) * qt(.950, 9-1) * 2.6 / sqrt(9)
-2 + c(-1, 1) * qt(.975, 9-1) * 2.6 / sqrt(9)
qnorm(.95,mean=42.04,sd=12)
n1 <- 288
n2 <- 288
sd1 <- 12
sd2 <- 12
df <- 1000000
md <- (42.04 - 44) - 0
semd <- sqrt(sd1^2/n1 + sd2^2/n2)
t.val <- (qt(.975, df) * semd)
pval <- pt(t.val,df=df,lower.tail=FALSE)
z.val <- (xbar1 - xbar2 - 0) / sqrt((sd/n1) + (sd/n1))
n1 <- 288
n2 <- 288
xbar1 <- 44
xbar2 <- 42.04
sd = 12
z.val <- (xbar1 - xbar2 - 0) / sqrt((sd/n1) + (sd/n2))
z.val <- (xbar1 - xbar2 - 0) / sqrt((sd^2/n1) + (sd^2/n2))
qnorm(z.val)
p.val <-  2*pnorm(-abs(z.val))
n1 <- 9
n2 <- 9
sd1 <- 1.5
sd2 <- 1.8
xbar1 <- -3
xbar2 <- 1
df <- (n1 - 1) + (n2 - 1)
t.val <- (xbar1 - xbar2 - 0) / sqrt((sd1^2/n1) + (sd2^2/n2))
pval <- pt(t.val,df=df,lower.tail=FALSE)
pval <- pt(t.val,df=df,lower.tail=TRUE)
pval <- pt(-abs(t.val),df=df,lower.tail=FALSE)
xbar <- 10
mu0 <- 17.87
n <- 1787
df <- n - 1
sd <- 1
t.val <- (xbar-mu0) / sd/sqrt(n)
pval <- pt(t.val,df=df,lower.tail=FALSE)
n <- 17.87
df <- n - 1
t.val <- (xbar-mu0) / sd/sqrt(n)
pval <- pt(t.val,df=df,lower.tail=FALSE)
n <- 1787
df <- n - 1
sd <- 1
t.val <- (xbar-mu0) / sd/sqrt(n)
pval <- pt(t.val,df=df,lower.tail=TRUE)
n <- 17.87
df <- n - 1
sd <- 1
t.val <- (xbar-mu0) / sd/sqrt(n)
pval <- pt(t.val,df=df,lower.tail=TRUE)
n1 <- 9
n2 <- 9
xbar1 <- -3
xbar2 <- 1
sd1 <- 1.5
sd2 <- 1.8
df <- (n1 - 1) + (n2 - 1)
t.val <- (xbar1 - xbar2 - 0) / sqrt((sd1^2/n1) + (sd2^2/n2))
xbar1 - xbar2
sd1^2/n1
sd2^2/n2
-4 / .61
-4 / sqrt(.61)
pval <- pt(-abs(t.val),df=df,lower.tail=TRUE)
samp1 <- rt(9,8)
samp2 <- rt(9,8)
samp1 <- rnorm(9,mean=-3,sd=1.5)
samp2 <- rnorm(9,mean=1,sd=1.8)
pval_exp <- t.test(samp1,samp2,alternative="two.sided")
t.test(samp1,samp2)
73.24* 4.52
sqrt(38.7)
8.415 * 50
choose(3,2)
choose(6,2)
(1/13) / (1/13)
1/13
(1/2) / 2
(1/13) / 13
(1/169)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
fit <- lm(x ~ w)
summary(fit)
fit <- lsfit(x, w)
summary(fit)
(x - u)^2
u <- 0.0025
(x - u)^2
((x - u)^2) * w
sum(((x - u)^2) * w)
u <- 1.077
sum(((x - u)^2) * w)
u <- 0.300
sum(((x - u)^2) * w)
u <- 0.1471
sum(((x - u)^2) * w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
summary(fit)
c <- fit$Coefficients[2]
c <- fit$Coefficients[1]
c <- fit$Coefficients
c <- fit$coefficients
c <- fit$coefficients[2]
summary(c)
c
c <- fit$coefficients[2]
c <- fit$coefficients
c
data(mtcars)
fit <- lm(mpg ~ weight)
fit <- lm(mpg ~ weight, data=mtcars)
fit <- lm(mpg ~ wt, data=mtcars)
fit$coefficients[2]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y ~ x)
Answer: fit$coefficients[1]
fit$coefficients[1]
u <- 0.573
sum(((x - u)^2))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum(((x - u)^2))
u <- 0.8
sum(((x - u)^2))
u <- 0.36
sum(((x - u)^2))
u <- 0.44
sum(((x - u)^2))
fit1 <- lm(mpg ~ 1, data = mtcars)
fit2 <- lm(mpg ~ wt, data=mtcars)
summary(fit2)$sigma / summary(fit1)$sigma
data(mtcars)
head(mtcars)
fit <- lm(mpg ~ cyl + wt)
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)
str(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, mtcars)
summary(fit)
summary(fit)
summary(fit)$coef
fit2 <- lm(mpg ~ as.factor(cyl), mtcars)
summary(fit2)$coef
summary(fit)$coef - summary(fit2)$coef
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)$coef
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hat(lm(y ~ x))
fit <- lm(y ~ x)
fit$hat
summary(fit)$hat
summary(fit)
hatvalues(fit)
dfbetas(fit)[5, 2]
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)[5, 2]
fit <- lm(mpg ~ as.factor(cyl) + wt, mtcars)
fit2 <- lm(mpg ~ as.factor(cyl), mtcars)
summary(fit)
summary(fit2)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
fit <- lm(mpg ~ as.factor(cyl) + wt, mtcars)
fit2 <- lm(mpg ~ as.factor(cyl), mtcars)
summary(fit)$coef
summary(fit2)$coef
fit <- lm(mpg ~ as.factor(cyl) + wt, mtcars)
fit2 <- lm(mpg ~ as.factor(cyl*wt, mtcars)
)]
fit2 <- lm(mpg ~ as.factor(cyl)*wt, mtcars)
anova(fit,fit2)
?shuttle
library(MASS)
?shuttle
fit1 <- lm(use ~ wind,data=shuttle)
str(shuttle)
logShuttle <- glm(shuttle$use ~ shuttle$wind,family="binomial")
summary(logShuttle)
exp(logShuttle)
exp(logShuttle$coeff)
logShuttle2 <- glm(shuttle$use ~ shuttle$wind + shuttle$magn,family="binomial")
summary(logShuttle2)
exp(logShuttle2$coeff)
data(InsectSprays)
str(InsectSprays)
insectSprayModel <- glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")
summary(insectSprayModel)
exp(insectSprayModel$coeff)
2.67415 / (2.67415 + 0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0;
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
model <= lm(y ~ xMat - 1)
model <- lm(y ~ xMat - 1)
summary(model)
swirl()
library(swirl)
swirl()
install_from_swirl("Regression Models")
unique(shuttle$use)
summary(shuttle)
logShuttle <- glm(shuttle$use ~ shuttle$wind,family="binomial")
exp(logShuttle$coeff)
logShuttle2 <- glm(shuttle$use ~ shuttle$wind + shuttle$magn,family="binomial")
summary(logShuttle2)
exp(logShuttle2$coeff)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- c(0);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
model <- lm(y ~ xMat - 1)
summary(model)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rfMmodel <- train(y ~ .,method="rf",data=vowel.train)
library(caret)
rfMmodel <- train(y ~ .,method="rf",data=vowel.train)
boostedMmodel <- train(y ~ .,method="gbm",data=vowel.train)
pred1 <- predict(rfMmodel,vowel.test)
pred2 <- predict(boostedMmodel,vowel.test)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rfModel <- train(y ~ .,method="rf",data=vowel.train)
boostedModel <- train(y ~ .,method="gbm",data=vowel.train)
rfPred <- predict(rfModel,vowel.test)
boostedPred <- predict(boostedModel,vowel.test)
rfPred <- predict(rfModel,vowel.test)
boostedPred <- predict(boostedModel,vowel.test)
str(rfPred)
rfRight <- rfPred==vowel.test$y
boostedRight <- boostedPred==vowel.test$y
length(rfRight[boostedRight])
rfAcc <- length(vowel.test[boostedRight]) / length(vowel.test)
length(vowel.test)
nrows(vowel.test)
nrow(vowel.test)
vowel.test[boostedRight]
rfAcc <- nrow(vowel.test[rfRight]) / nrow(vowel.test)
rfAcc <- nrow(rfRight[rfRight]) / nrow(vowel.test)
nrow(rfRight[rfRight])
rfRight[TRUE,]
str(rfRight)
rfPred[rfRight]
rfAcc <- nrow(rfPred[rfRight]) / nrow(vowel.test)
nrow(rfPred[rfRight])
sum(rfRight)
rfAcc <- sum(rfRight) / nrow(vowel.test)
boostedAcc <- sum(boostedRight) / nrow(vowel.test)
data(Titanic)
str(Titanic)
head(Titanic)
survived <- subset(data=Titanic,Survived="Yes")
survived <- subset(Titanic,Survived="Yes")
subset(Titanic,Survived="Yes")
subset(airquality, Temp > 80, select = c(Ozone, Temp))
subset(Titanic, Survived == "Yes")
subset(Titanic, Survived == "Yes")
subset(Titanic)
subset(airquality, Day == 1, select = -Temp)
subset(Titanic, Age == "Adult")
subset(Titanic, Titanic$Age == "Adult")
colnames(Titanic)
str(Titanic)
head(Titanic)
head(Titanic)
nrow(Titanic)
library(datasets)
str(Titanic)
tda <- as.data.frame(Titanic)
str(tda)
head(tda)
setwd("C:\\$Data\\John\\$John\\Classes\\DataScienceSpecialization\\DataProducts\\Projects\\Project2\\titanic_survivors")
